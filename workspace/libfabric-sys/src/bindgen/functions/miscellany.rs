// This file is part of libfabric. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/libfabric/master/COPYRIGHT. No part of libfabric, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2016 The developers of libfabric. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/libfabric/master/COPYRIGHT.


extern "C"
{
	pub fn fi_strerror(errnum: c_int) -> *const c_char;
	pub fn fi_tostr(data: *const c_void, datatype: fi_type) -> *mut c_char;
	pub fn fi_version() -> u32;
	pub fn rust_fi_accept(ep: *mut fid_ep, param: *const c_void, paramlen: usize) -> c_int;
	pub fn rust_fi_alias(fid: *mut fid, alias_fid: *mut *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_allocinfo() -> *mut fi_info;
	pub fn rust_fi_atomic(ep: *mut fid_ep, buf: *const c_void, count: usize, desc: *mut c_void, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_atomicmsg(ep: *mut fid_ep, msg: *const fi_msg_atomic, flags: u64) -> isize;
	pub fn rust_fi_atomicv(ep: *mut fid_ep, iov: *const fi_ioc, desc: *mut *mut c_void, count: usize, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_atomicvalid(ep: *mut fid_ep, datatype: fi_datatype, op: fi_op, count: *mut usize) -> c_int;
	pub fn rust_fi_av_bind(av: *mut fid_av, fid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_av_insert(av: *mut fid_av, addr: *const c_void, count: usize, fi_addr: *mut fi_addr_t, flags: u64, context: *mut c_void) -> c_int;
	pub fn rust_fi_av_insertsvc(av: *mut fid_av, node: *const c_char, service: *const c_char, fi_addr: *mut fi_addr_t, flags: u64, context: *mut c_void) -> c_int;
	pub fn rust_fi_av_insertsym(av: *mut fid_av, node: *const c_char, nodecnt: usize, service: *const c_char, svccnt: usize, fi_addr: *mut fi_addr_t, flags: u64, context: *mut c_void) -> c_int;
	pub fn rust_fi_av_lookup(av: *mut fid_av, fi_addr: fi_addr_t, addr: *mut c_void, addrlen: *mut usize) -> c_int;
	pub fn rust_fi_av_open(domain: *mut fid_domain, attr: *mut fi_av_attr, av: *mut *mut fid_av, context: *mut c_void) -> c_int;
	pub fn rust_fi_av_remove(av: *mut fid_av, fi_addr: *mut fi_addr_t, count: usize, flags: u64) -> c_int;
	pub fn rust_fi_av_straddr(av: *mut fid_av, addr: *const c_void, buf: *mut c_char, len: *mut usize) -> *const c_char;
	pub fn rust_fi_cancel(fid: fid_t, context: *mut c_void) -> isize;
	pub fn rust_fi_close(fid: *mut fid) -> c_int;
	pub fn rust_fi_cntr_add(cntr: *mut fid_cntr, value: u64) -> c_int;
	pub fn rust_fi_cntr_adderr(cntr: *mut fid_cntr, value: u64) -> c_int;
	pub fn rust_fi_cntr_open(domain: *mut fid_domain, attr: *mut fi_cntr_attr, cntr: *mut *mut fid_cntr, context: *mut c_void) -> c_int;
	pub fn rust_fi_cntr_read(cntr: *mut fid_cntr) -> u64;
	pub fn rust_fi_cntr_readerr(cntr: *mut fid_cntr) -> u64;
	pub fn rust_fi_cntr_set(cntr: *mut fid_cntr, value: u64) -> c_int;
	pub fn rust_fi_cntr_seterr(cntr: *mut fid_cntr, value: u64) -> c_int;
	pub fn rust_fi_cntr_wait(cntr: *mut fid_cntr, threshold: u64, timeout: c_int) -> c_int;
	pub fn rust_fi_compare_atomic(ep: *mut fid_ep, buf: *const c_void, count: usize, desc: *mut c_void, compare: *const c_void, compare_desc: *mut c_void, result: *mut c_void, result_desc: *mut c_void, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_compare_atomicmsg(ep: *mut fid_ep, msg: *const fi_msg_atomic, comparev: *const fi_ioc, compare_desc: *mut *mut c_void, compare_count: usize, resultv: *mut fi_ioc, result_desc: *mut *mut c_void, result_count: usize, flags: u64) -> isize;
	pub fn rust_fi_compare_atomicv(ep: *mut fid_ep, iov: *const fi_ioc, desc: *mut *mut c_void, count: usize, comparev: *const fi_ioc, compare_desc: *mut *mut c_void, compare_count: usize, resultv: *mut fi_ioc, result_desc: *mut *mut c_void, result_count: usize, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_compare_atomicvalid(ep: *mut fid_ep, datatype: fi_datatype, op: fi_op, count: *mut usize) -> c_int;
	pub fn rust_fi_connect(ep: *mut fid_ep, addr: *const c_void, param: *const c_void, paramlen: usize) -> c_int;
	pub fn rust_fi_control(fid: *mut fid, command: c_int, arg: *mut c_void) -> c_int;
	pub fn rust_fi_cq_open(domain: *mut fid_domain, attr: *mut fi_cq_attr, cq: *mut *mut fid_cq, context: *mut c_void) -> c_int;
	pub fn rust_fi_cq_read(cq: *mut fid_cq, buf: *mut c_void, count: usize) -> isize;
	pub fn rust_fi_cq_readerr(cq: *mut fid_cq, buf: *mut fi_cq_err_entry, flags: u64) -> isize;
	pub fn rust_fi_cq_readfrom(cq: *mut fid_cq, buf: *mut c_void, count: usize, src_addr: *mut fi_addr_t) -> isize;
	pub fn rust_fi_cq_signal(cq: *mut fid_cq) -> c_int;
	pub fn rust_fi_cq_sread(cq: *mut fid_cq, buf: *mut c_void, count: usize, cond: *const c_void, timeout: c_int) -> isize;
	pub fn rust_fi_cq_sreadfrom(cq: *mut fid_cq, buf: *mut c_void, count: usize, src_addr: *mut fi_addr_t, cond: *const c_void, timeout: c_int) -> isize;
	pub fn rust_fi_cq_strerror(cq: *mut fid_cq, prov_errno: c_int, err_data: *const c_void, buf: *mut c_char, len: usize) -> *const c_char;
	pub fn rust_fi_domain(fabric: *mut fid_fabric, info: *mut fi_info, domain: *mut *mut fid_domain, context: *mut c_void) -> c_int;
	pub fn rust_fi_domain_bind(domain: *mut fid_domain, fid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_enable(ep: *mut fid_ep) -> c_int;
	pub fn rust_fi_endpoint(domain: *mut fid_domain, info: *mut fi_info, ep: *mut *mut fid_ep, context: *mut c_void) -> c_int;
	pub fn rust_fi_ep_alias(ep: *mut fid_ep, alias_ep: *mut *mut fid_ep, flags: u64) -> c_int;
	pub fn rust_fi_ep_bind(ep: *mut fid_ep, bfid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_eq_open(fabric: *mut fid_fabric, attr: *mut fi_eq_attr, eq: *mut *mut fid_eq, context: *mut c_void) -> c_int;
	pub fn rust_fi_eq_read(eq: *mut fid_eq, event: *mut u32, buf: *mut c_void, len: usize, flags: u64) -> isize;
	pub fn rust_fi_eq_readerr(eq: *mut fid_eq, buf: *mut fi_eq_err_entry, flags: u64) -> isize;
	pub fn rust_fi_eq_sread(eq: *mut fid_eq, event: *mut u32, buf: *mut c_void, len: usize, timeout: c_int, flags: u64) -> isize;
	pub fn rust_fi_eq_strerror(eq: *mut fid_eq, prov_errno: c_int, err_data: *const c_void, buf: *mut c_char, len: usize) -> *const c_char;
	pub fn rust_fi_eq_write(eq: *mut fid_eq, event: u32, buf: *const c_void, len: usize, flags: u64) -> isize;
	pub fn rust_fi_fetch_atomic(ep: *mut fid_ep, buf: *const c_void, count: usize, desc: *mut c_void, result: *mut c_void, result_desc: *mut c_void, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_fetch_atomicmsg(ep: *mut fid_ep, msg: *const fi_msg_atomic, resultv: *mut fi_ioc, result_desc: *mut *mut c_void, result_count: usize, flags: u64) -> isize;
	pub fn rust_fi_fetch_atomicv(ep: *mut fid_ep, iov: *const fi_ioc, desc: *mut *mut c_void, count: usize, resultv: *mut fi_ioc, result_desc: *mut *mut c_void, result_count: usize, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op, context: *mut c_void) -> isize;
	pub fn rust_fi_fetch_atomicvalid(ep: *mut fid_ep, datatype: fi_datatype, op: fi_op, count: *mut usize) -> c_int;
	pub fn rust_fi_getname(fid: fid_t, addr: *mut c_void, addrlen: *mut usize) -> c_int;
	pub fn rust_fi_getopt(fid: fid_t, level: c_int, optname: c_int, optval: *mut c_void, optlen: *mut usize) -> c_int;
	pub fn rust_fi_getpeer(ep: *mut fid_ep, addr: *mut c_void, addrlen: *mut usize) -> c_int;
	pub fn rust_fi_inject(ep: *mut fid_ep, buf: *const c_void, len: usize, dest_addr: fi_addr_t) -> isize;
	pub fn rust_fi_inject_atomic(ep: *mut fid_ep, buf: *const c_void, count: usize, dest_addr: fi_addr_t, addr: u64, key: u64, datatype: fi_datatype, op: fi_op) -> isize;
	pub fn rust_fi_inject_write(ep: *mut fid_ep, buf: *const c_void, len: usize, dest_addr: fi_addr_t, addr: u64, key: u64) -> isize;
	pub fn rust_fi_inject_writedata(ep: *mut fid_ep, buf: *const c_void, len: usize, data: u64, dest_addr: fi_addr_t, addr: u64, key: u64) -> isize;
	pub fn rust_fi_injectdata(ep: *mut fid_ep, buf: *const c_void, len: usize, data: u64, dest_addr: fi_addr_t) -> isize;
	pub fn rust_fi_join(ep: *mut fid_ep, addr: *const c_void, flags: u64, mc: *mut *mut fid_mc, context: *mut c_void) -> c_int;
	pub fn rust_fi_listen(pep: *mut fid_pep) -> c_int;
	pub fn rust_fi_mc_addr(mc: *mut fid_mc) -> fi_addr_t;
	pub fn rust_fi_mr_bind(mr: *mut fid_mr, bfid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_mr_desc(mr: *mut fid_mr) -> *mut c_void;
	pub fn rust_fi_mr_enable(mr: *mut fid_mr) -> c_int;
	pub fn rust_fi_mr_key(mr: *mut fid_mr) -> u64;
	pub fn rust_fi_mr_map_raw(domain: *mut fid_domain, base_addr: u64, raw_key: *mut u8, key_size: usize, key: *mut u64, flags: u64) -> c_int;
	pub fn rust_fi_mr_raw_attr(mr: *mut fid_mr, base_addr: *mut u64, raw_key: *mut u8, key_size: *mut usize, flags: u64) -> c_int;
	pub fn rust_fi_mr_refresh(mr: *mut fid_mr, iov: *const iovec, count: usize, flags: u64) -> c_int;
	pub fn rust_fi_mr_reg(domain: *mut fid_domain, buf: *const c_void, len: usize, access: u64, offset: u64, requested_key: u64, flags: u64, mr: *mut *mut fid_mr, context: *mut c_void) -> c_int;
	pub fn rust_fi_mr_regattr(domain: *mut fid_domain, attr: *const fi_mr_attr, flags: u64, mr: *mut *mut fid_mr) -> c_int;
	pub fn rust_fi_mr_regv(domain: *mut fid_domain, iov: *const iovec, count: usize, access: u64, offset: u64, requested_key: u64, flags: u64, mr: *mut *mut fid_mr, context: *mut c_void) -> c_int;
	pub fn rust_fi_mr_unmap_key(domain: *mut fid_domain, key: u64) -> c_int;
	pub fn rust_fi_open_ops(fid: *mut fid, name: *const c_char, flags: u64, ops: *mut *mut c_void, context: *mut c_void) -> c_int;
	pub fn rust_fi_passive_ep(fabric: *mut fid_fabric, info: *mut fi_info, pep: *mut *mut fid_pep, context: *mut c_void) -> c_int;
	pub fn rust_fi_pep_bind(pep: *mut fid_pep, bfid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_poll(pollset: *mut fid_poll, context: *mut *mut c_void, count: c_int) -> c_int;
	pub fn rust_fi_poll_add(pollset: *mut fid_poll, event_fid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_poll_del(pollset: *mut fid_poll, event_fid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_poll_open(domain: *mut fid_domain, attr: *mut fi_poll_attr, pollset: *mut *mut fid_poll) -> c_int;
	pub fn rust_fi_query_atomic(domain: *mut fid_domain, datatype: fi_datatype, op: fi_op, attr: *mut fi_atomic_attr, flags: u64) -> c_int;
	pub fn rust_fi_read(ep: *mut fid_ep, buf: *mut c_void, len: usize, desc: *mut c_void, src_addr: fi_addr_t, addr: u64, key: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_readmsg(ep: *mut fid_ep, msg: *const fi_msg_rma, flags: u64) -> isize;
	pub fn rust_fi_readv(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, src_addr: fi_addr_t, addr: u64, key: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_recv(ep: *mut fid_ep, buf: *mut c_void, len: usize, desc: *mut c_void, src_addr: fi_addr_t, context: *mut c_void) -> isize;
	pub fn rust_fi_recvmsg(ep: *mut fid_ep, msg: *const fi_msg, flags: u64) -> isize;
	pub fn rust_fi_recvv(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, src_addr: fi_addr_t, context: *mut c_void) -> isize;
	pub fn rust_fi_reject(pep: *mut fid_pep, handle: fid_t, param: *const c_void, paramlen: usize) -> c_int;
	pub fn rust_fi_rx_addr(fi_addr: fi_addr_t, rx_index: c_int, rx_ctx_bits: c_int) -> fi_addr_t;
	pub fn rust_fi_rx_context(ep: *mut fid_ep, index: c_int, attr: *mut fi_rx_attr, rx_ep: *mut *mut fid_ep, context: *mut c_void) -> c_int;
	pub fn rust_fi_scalable_ep(domain: *mut fid_domain, info: *mut fi_info, sep: *mut *mut fid_ep, context: *mut c_void) -> c_int;
	pub fn rust_fi_scalable_ep_bind(sep: *mut fid_ep, bfid: *mut fid, flags: u64) -> c_int;
	pub fn rust_fi_send(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, dest_addr: fi_addr_t, context: *mut c_void) -> isize;
	pub fn rust_fi_senddata(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, data: u64, dest_addr: fi_addr_t, context: *mut c_void) -> isize;
	pub fn rust_fi_sendmsg(ep: *mut fid_ep, msg: *const fi_msg, flags: u64) -> isize;
	pub fn rust_fi_sendv(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, dest_addr: fi_addr_t, context: *mut c_void) -> isize;
	pub fn rust_fi_setname(fid: fid_t, addr: *mut c_void, addrlen: usize) -> c_int;
	pub fn rust_fi_setopt(fid: fid_t, level: c_int, optname: c_int, optval: *const c_void, optlen: usize) -> c_int;
	pub fn rust_fi_shutdown(ep: *mut fid_ep, flags: u64) -> c_int;
	pub fn rust_fi_srx_context(domain: *mut fid_domain, attr: *mut fi_rx_attr, rx_ep: *mut *mut fid_ep, context: *mut c_void) -> c_int;
	pub fn rust_fi_stx_context(domain: *mut fid_domain, attr: *mut fi_tx_attr, stx: *mut *mut fid_stx, context: *mut c_void) -> c_int;
	pub fn rust_fi_tinject(ep: *mut fid_ep, buf: *const c_void, len: usize, dest_addr: fi_addr_t, tag: u64) -> isize;
	pub fn rust_fi_tinjectdata(ep: *mut fid_ep, buf: *const c_void, len: usize, data: u64, dest_addr: fi_addr_t, tag: u64) -> isize;
	pub fn rust_fi_trecv(ep: *mut fid_ep, buf: *mut c_void, len: usize, desc: *mut c_void, src_addr: fi_addr_t, tag: u64, ignore: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_trecvmsg(ep: *mut fid_ep, msg: *const fi_msg_tagged, flags: u64) -> isize;
	pub fn rust_fi_trecvv(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, src_addr: fi_addr_t, tag: u64, ignore: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_trywait(fabric: *mut fid_fabric, fids: *mut *mut fid, count: c_int) -> c_int;
	pub fn rust_fi_tsend(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, dest_addr: fi_addr_t, tag: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_tsenddata(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, data: u64, dest_addr: fi_addr_t, tag: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_tsendmsg(ep: *mut fid_ep, msg: *const fi_msg_tagged, flags: u64) -> isize;
	pub fn rust_fi_tsendv(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, dest_addr: fi_addr_t, tag: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_tx_context(ep: *mut fid_ep, index: c_int, attr: *mut fi_tx_attr, tx_ep: *mut *mut fid_ep, context: *mut c_void) -> c_int;
	pub fn rust_fi_wait(waitset: *mut fid_wait, timeout: c_int) -> c_int;
	pub fn rust_fi_wait_open(fabric: *mut fid_fabric, attr: *mut fi_wait_attr, waitset: *mut *mut fid_wait) -> c_int;
	pub fn rust_fi_write(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, dest_addr: fi_addr_t, addr: u64, key: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_writedata(ep: *mut fid_ep, buf: *const c_void, len: usize, desc: *mut c_void, data: u64, dest_addr: fi_addr_t, addr: u64, key: u64, context: *mut c_void) -> isize;
	pub fn rust_fi_writemsg(ep: *mut fid_ep, msg: *const fi_msg_rma, flags: u64) -> isize;
	pub fn rust_fi_writev(ep: *mut fid_ep, iov: *const iovec, desc: *mut *mut c_void, count: usize, dest_addr: fi_addr_t, addr: u64, key: u64, context: *mut c_void) -> isize;
}
